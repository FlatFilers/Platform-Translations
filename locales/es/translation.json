{
  "myDocument": {
    "title": "¡Tu espacio de localización!",
    "body": "# Personaliza el idioma y el texto en tus Espacios de Flatfile\n\n---\n\nHabilita las traducciones, personalizaciones y sobreescrituras de texto para tus Espacios fácilmente con el soporte de localización de Flatfile.\n\n## Cosas que puedes hacer aquí\n\nPrueba diferentes idiomas y observa cómo nuestra página de markdown se actualiza dinámicamente en base al idioma seleccionado!! 🌍\n\nSolo agrega `?lng=en` (para inglés), `?lng=es` (para español) al final de la URL y presiona enter. Ve la lista completa de idiomas soportados y sus códigos [aquí](https://flatfile.com/docs/guides/localization#available-languages)\n\nRevisa nuestras [traducciones aquí](https://github.com/FlatFilers/Platform-Translations/blob/demo-structure/locales/en/translation.json). También puedes ver el código fuente para este espacio en [Typescript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) y en [Javascript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\n## Creando este Espacio\n\nEste Espacio ha sido configurado con opciones de localización.\n\nAquí tienes un vistazo al código que se utilizó para crearlo:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) { jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/demo-structure/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n}\n```\n\n## Documentación adicional\n\nLee más sobre cómo personalizar el texto de tu Espacio [aquí](https://flatfile.com/docs/guides/localization).\n\n## Aprende más sobre Flatfile probando nuestras [otras demos](https://platform.flatfile.com/getting-started)\n"
  },
  "sidebar": {
    "collapse": {
      "documents": "Mis Documentos y cosas"
    }
  },
  "host": {
    "modals": {
      "closeModal": {
        "message": "¡WOW por favor no me cierres!",
        "primaryButtonText": "¡Sí, salir!",
        "secondaryButtonText": "No, quedarme :'(",
        "title": "Cerrar Ventana"
      },
      "errorModal": {
        "title": "Algo salió mal"
      }
    }
  }
}
