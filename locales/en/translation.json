{
  "myDocument": {
    "title": "Your Localization Space!",
    "body": "# Tailor the language and text in your Flatfile Spaces\n\n---\n\nEnable translations, customizations, and text overrides for your Spaces easily with Flatfile's localization support.\n\n## Things you can do here\n\nTry out different languages and watch our markdown page updates itself dynamically based on the selected language!! 🌍\n\nJust add `?lng=en` (for english), `?lng=es` (for spanish) to the end of the URL and hit enter. See a full list of supported languages and their codes [here](https://flatfile.com/docs/guides/localization#available-languages)\n\nCheck out our [translations here](https://github.com/FlatFilers/Platform-Translations/blob/demo-structure/locales/en/translation.json). You can also checkout the source code for this space in [Typescript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) and in [Javascript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\n## Making this Space\n\nThis Space has been configured with localization options.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/demo-structure/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n\n## Further documentation\n\nRead more about customizing your Space text [here](https://flatfile.com/docs/guides/localization).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n"
  }
}
