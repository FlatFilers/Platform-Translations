{
  "myDocument": {
    "title": "Seu Espa√ßo de Localiza√ß√£o!",
    "body": "# Personalize a linguagem e o texto nos seus Espa√ßos Flatfile\n\n---\n\nAtive tradu√ß√µes, customiza√ß√µes e sobreposi√ß√µes de texto para os seus Espa√ßos facilmente com o apoio de localiza√ß√£o do Flatfile.\n\n## Coisas que voc√™ pode fazer aqui\n\nExperimente diferentes idiomas e observe nossa p√°gina de markdown se atualizando dinamicamente baseada no idioma selecionado!! üåç\n\nS√≥ adicione `?lng=en` (para ingl√™s), `?lng=es` (para espanhol) no final da URL e pressione enter. Veja a lista completa de idiomas suportados e seus c√≥digos [aqui](https://flatfile.com/docs/guides/localization#available-languages)\n\nConfira as nossas [tradu√ß√µes aqui](https://github.com/FlatFilers/Platform-Translations/blob/demo-structure/locales/en/translation.json). Voc√™ tamb√©m pode verificar o c√≥digo-fonte para este espa√ßo em [Typescript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) e em [Javascript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\n## Criando este Espa√ßo\n\nEste Espa√ßo foi configurado com op√ß√µes de localiza√ß√£o.\n\nAqui est√° um vislumbre do c√≥digo que foi usado para cri√°-lo:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) { jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/demo-structure/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n}\n```\n\n## Documenta√ß√£o adicional\n\nLeia mais sobre como personalizar o texto do seu Espa√ßo [aqui](https://flatfile.com/docs/guides/localization).\n\n## Saiba mais sobre o Flatfile experimentando [outras demonstra√ß√µes](https://platform.flatfile.com/getting-started)\n"
  }
}
